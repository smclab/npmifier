#!/usr/bin/env node

const path = require('path');
const program = require('commander');
const when = require('when');
const keys = require('when/keys');
const sequence = require('when/sequence');

program
	.usage('[OPTIONS] [PROJECT_DIR]')
	.option('-p, --project-dir <dir>', 'directory of the project to work on', process.cwd())
	.option('-o, --project-only', "don’t check global installation")
	.option('-s, --simulate', "simulate actions, and don’t to nothing")
	.option('-c, --no-colors', "disable colors")
	.parse(process.argv);

const npmifier = require('..');
const fs = require('../src/fs');
const utils = require('../src/utils');
const TiApp = require('../src/tiapp');
const titaniumConfig = require('../src/config');

const NPMIFIER_PLUGIN_PATH = path.resolve(__dirname, '..', 'plugins');

utils.colors = program.colors;

if (program.simulate) {
	console.log('');
	utils.message('red', "SIMULATION MODE - No change will actually happen")
	utils.message('red', "================================================")
}

keys.all({
	tiapp: TiApp.fromPath(program.projectDir),
	ticonfig: titaniumConfig.read(),
	cvs: fs.findCVS(program.projectDir),
	projectPlugin: false,
	globalPlugin: hasGlobalPlugin(),
	sourcesDir: fs.isDirectory(path.resolve(program.projectDir, 'Sources')),
	resourcesDir: fs.isDirectory(path.resolve(program.projectDir, 'Resources')),
	package: fs.readFile(path.resolve(program.projectDir, 'package.json'), 'utf8').then(JSON.parse).catch(function (err) {
		if (err.code == 'ENOENT') return false;
		else return when.reject(err);
	})
})
.then(function (info) {
	info.projectPlugin = hasProjectPlugin(info.tiapp);
	info.globalPlugin = hasGlobalPlugin(info.ticonfig);
	info.cvsIgnoresOK = hasCVSIgnoresOk(info.cvs);
	return keys.all(info);
})
.then(function (info) {
	info.prompts = {};
	return when.resolve()
	.then(ask({
		name: 'installGlobalPlugin',
		skip: program.projectOnly || info.globalPlugin,
		def: true,
		newline: true,
		message: "No global plugin found",
		prompt: "Do you want me to install it?",
		warning: "Npmification will not happen automatically during build!"
	}, info.prompts))
	.then(ask({
		name: 'installProjectPlugin',
		skip: info.projectPlugin,
		def: true,
		newline: true,
		message: "Plugin not installed for this app",
		prompt: "Do you want me to configure it?",
		warning: "Npmification will not happen automatically during build!"
	}, info.prompts))
	.then(ask({
		name: 'buildPackage',
		skip: info.package,
		def: true,
		newline: true,
		message: "No 'package.json' found",
		prompt: "I’ll build one for you, is it ok?",
		warning: "You’ll need to manually configure a 'package.json'"
	}, info.prompts))
	.then(ask({
		name: 'mkdirSources',
		skip: info.sourcesDir || info.resourcesDir,
		def: true,
		newline: true,
		message: "No 'Sources' directory found",
		prompt: "Do you want me to make one for you?",
		warning: "You’ll need to configure correctly the 'package.json'"
	}, info.prompts))
	.then(ask({
		name: 'moveResources',
		skip: info.sourcesDir || !info.resourcesDir,
		def: true,
		newline: true,
		message: "No 'Sources' directory found",
		prompt: "Do you want me to rename 'Resources'?",
		warning: "You’ll need to configure correctly the 'package.json'"
	}, info.prompts))
	.then(ask({
		name: 'trySVN',
		skip: function () { return info.prompts.mkdirSources || !info.prompts.moveResources || !info.cvs.svn; },
		def: true,
		newline: false,
		message: "...but looks like you’re using Subversion!",
		prompt: "Do you want me to try to call `svn mv`? That’s pretty risky...",
		warning: "You’ll need to configure correctly the 'package.json'"
	}, info.prompts))
	.then(ask({
		name: 'addToIgnore',
		skip: info.cvsIgnoresOK || !(info.cvs.git || info.cvs.svn),
		def: true,
		newline: true,
		message: "This project is versioned using " + getCVSName(info.cvs),
		prompt: "I’ll add 'Resources' and 'node_modules' to the ignored files. Ok?",
		warning: "Pay attention to you commits!"
	}, info.prompts))
	.yield(info);
})
.then(function (info) {
	if (!info.prompts.buildPackage) return info;

	console.log('');
	utils.message('blue', "Ok, now tell me something about your project!")

	return promptPackage(info);
})
.then(function (info) {
	if (info.prompts.buildPackage || !info.package || info.package.main) return info;

	info.buildPackage = true;

	console.log('');
	utils.message('yellow', "There’s no `main` property set in you 'package.json'");

	return utils.prompts([
		{
			type: 'input',
			name: 'main',
			message: 'What should it be?',
			default: './Sources/app'
		}
	]).then(function (results) {
		info.package.main = results.main;
		return info;
	});
})
.then(function (info) {

	console.log('');

	if (program.simulate) {
		return [];
	}

	function noop() {
		return 'noop';
	}

	return sequence([
		(info.prompts.installGlobalPlugin) && installGlobalPlugin,
		(info.prompts.installProjectPlugin) && installProjectPlugin,
		(info.prompts.buildPackage) && buildPackage,
		(info.prompts.trySVN) && moveResourcesSVN,
		(!info.prompts.trySVN && info.prompts.moveResources) && moveResources,
		(info.prompts.addToIgnore) && addToIgnore
	].map(function (f) {
		return f || noop;
	}), info);
})
.done(function (actions) {

	var didnothing = actions.every(function (action) {
		return action === 'noop';
	});

	if (didnothing) {
		utils.message('green', "I did nothing! \\o/ woohooo!")
		console.log('');
	}
	else {
		console.log('');
		utils.message('green', "Conversion complete!")
		console.log('');
	}

}, function (err) {
	console.log('');
	utils.message('red', "An error occurred!");
	console.log('');
	throw err;
});

function ask(cfg, into) {
	return function () {

		var name = result(cfg, 'name');
		var skip = result(cfg, 'skip');
		var def = result(cfg, 'def');
		var newline = result(cfg, 'newline');
		var message = result(cfg, 'message');
		var prompt = result(cfg, 'prompt');
		var warning = result(cfg, 'warning');

		if (skip) return false;

		if (newline) console.log('');
		utils.message('yellow', message);
		return utils.yesno(prompt, def).tap(function (result) {
			if (into) into[ name ] = result;
			if (!result) utils.message('red', warning);
		});
	};
}

function result(cfg, name) {
	return typeof cfg[ name ] === 'function' ? cfg[ name ]() : cfg[ name ];
}

function getCVSName(cvs) {
	return (
		cvs.git ? 'git-scm' :
		cvs.svn ? 'Subversion' :
		cvs.hg  ? 'Mercurial' :
		'[unknown]'
	);
}

function hasGlobalPlugin(config) {
	return config && config.paths && config.paths.plugins && config.paths.plugins.indexOf(NPMIFIER_PLUGIN_PATH) >= 0;
}

function hasProjectPlugin(tiapp) {
	return tiapp.hasPlugin('npmifier');
}

function installGlobalPlugin(info) {
	var config = info.ticonfig;

	config.paths || (config.paths = {});
	config.paths.plugins || (config.path.plugins = []);
	config.paths.plugins.push(NPMIFIER_PLUGIN_PATH);
	return titaniumConfig.save(config).then(function () {
		utils.message('green', "Global plugin installed");
	});
}

function hasCVSIgnoresOk(cvs) {
	if (cvs.svn) return hasSVNIgnoresOk();
	else if (cvs.git) return hasGITIgnoresOk();
}

function hasSVNIgnoresOk() {
	return getSVNIgnores(program.projectDir).then(function (lines) {
		return (
			lines.indexOf('node_modules') >= 0 &&
			lines.indexOf('Resources') >= 0
		);
	});
}

function getSVNIgnores(dir) {
	return (
		fs.findToRoot(dir, '.svn')
	)
	.then(function (isSVN) {
		if (!isSVN) throw new Error("Not an SVN project");
		return fs.exec('svn', 'propget', 'svn:ignore', fs.execEscape(dir));
	})
	.spread(function (stdout, stderr) {
		return (stdout || "").split(/[\r\n]+/g);
	});
}

function getGITIgnores(dir) {
	return (
		fs.readFile(path.resolve(dir, '.gitignore'), 'utf8')
	)
	.then(function (gitignore) {
		return gitignore.split(/[\r\n]+/g);
	})
	.catch(function (err) {
		if (err.code === 'ENOENT') return [];
		else throw err;
	});;
}

function hasGITIgnoresOk() {
	return (
		getGITIgnores(program.projectDir)
	)
	.then(function (lines) {
		// Mmh...
		return (
			lines.indexOf('node_modules') >= 0 &&
			lines.indexOf('Resources') >= 0
		);
	});
}

function addToIgnore(info) {
	var cvs = info.cvs;
	if (cvs.git) return addToGITIgnore();
	else if (cvs.svn) return addToSVNIgnore();
}

function addToIgnoreLines(lines) {

	lines = lines.filter(function (line) {
		return line.trim()
	});

	if (lines.indexOf('node_modules') < 0) {
		lines.push('node_modules');
	}

	if (lines.indexOf('Resources') < 0) {
		lines.push('Resources');
	}

	return lines;
}

function addToGITIgnore() {
	return (
		getGITIgnores(program.projectDir)
	)
	.then(addToIgnoreLines)
	.then(function (lines) {
		return fs.writeFile(path.resolve(program.projectDir, '.gitignore'), lines.join("\n"), {
			encoding: 'utf8'
		});
	});
}

function addToSVNIgnore() {
	return (
		getSVNIgnores(program.projectDir)
	)
	.then(addToIgnoreLines)
	.then(function (lines) {
		return fs.exec('svn', 'propset', 'svn:ignore', fs.execEscape(lines.join("\n")), program.projectDir);
	});
}

function buildPackage(info) {
	return fs.writeFile(
		path.resolve(program.projectDir, 'package.json'),
		JSON.stringify(info.package, null, 2), { encoding: 'utf8' }
	).then(function () {
		utils.message('green', "Successfully built 'package.json")
	});
}

function moveResources(info) {
	return fs.rename(
		path.resolve(program.projectDir, 'Resources'),
		path.resolve(program.projectDir, 'Sources')
	).then(function () {
		utils.message('green', "'Resources' successfully renamed in 'Sources'");
	});
}

function moveResourcesSVN(info) {
	return fs.mvSVN(
		path.resolve(program.projectDir, 'Resources'),
		path.resolve(program.projectDir, 'Sources')
	).then(function () {
		utils.message('green', "'Resources' successfully moved with `svn mv`");
	});
}

function promptPackage(info) {
	var roots = info.tiapp.getRoots();

	var package = info.package || {};

	function p(name, msg, def) {
		if (def === 'not specified') def = undefined;

		return {
			name: name,
			message: msg || name,
			type: 'input',
			default: package[ name ] || def
		};
	}

	console.log('');

	var tiappAuthor = roots[ 'publisher' ];

	if (roots[ 'url' ]) {
		tiappAuthor += ' (' + roots[ 'url' ] + ')';
	}

	return utils.prompts([
		p('name', null, roots[ 'id' ]),
		p('version', null, roots[ 'version' ]),
		p('description', null, roots[ 'name' ] || path.basename(program.projectDir)),
		p('guid', null, roots[ 'guid' ]),
		p('author', null, tiappAuthor),
		p('main', "main entry point", './Sources/app')
	])
	.then(function (package) {
		info.package = package;

		console.log('');

		console.log(require('util').inspect(info.package, { colors: program.colors }).split(/[\r\n]+/g).map(function (line) {
			return '  ' + line;
		}).join('\n'));

		console.log('');

		utils.message(null, "This is the resulting 'package.json'.");

		return utils.yesno("Is it ok?").then(function (ok) {
			if (ok) return info;
			else return promptPackage(info);
		});
	});
}

function installProjectPlugin(info) {

	// Legacy reasons...

	info.tiapp.uninstallPlugin('npmify');

	info.tiapp.installPlugin('npmifier', 'latest');

	return info.tiapp.saveToFile().then(function() {
		utils.message('green', "Plugin installed in the project")
	})
}
